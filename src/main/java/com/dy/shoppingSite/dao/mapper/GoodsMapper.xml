<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.dy.shoppingSite.dao.GoodsDao">
	<!--property是在java中get，set方法的那些属性 -->
	<resultMap type="Goods" id="GoodsResultMap">
		<id column="id" property="id" />
		<result column="goodsNo" property="goodsNo" />
		<result column="name" property="name" />
		<result column="price1" property="price1" />
		<result column="price2" property="price2" />
		<result column="stock" property="stock" />
		<result column="thumbnail" property="thumbnail" />
		<result column="description" property="description" />
		<association property="category" javaType="Category">
			<id column="id" property="id" />
			<!-- 因为goods中也有name属性，因此查询出来的结果会重复。 故把category中的name重新命名为cname，这样就不会重复。 
				由此可以看出column属性不一定是数据库中的列名， 而是查询后显示的列名 -->
			<result column="cname" property="name" />

		</association>
	</resultMap>

	<select id="getGoodses" resultMap="GoodsResultMap"
		parameterType="Goods">
		<!-- 这里给c.name使用别名cname，因为g中也name列，会重复 -->
		select g.*, c.name cname from shop_goods g, shop_category c where
		g.categoryId = c.id
		<!-- parameterType单一的情况下，就是只有goods或者只有string，(不是hashmap或者list等)， 查询时不需要加所属名字的，比如goods.name -->
		<if test="categoryId != null and categoryId!= '' ">
			and g.categoryId = #{categoryId}
		</if>
		<if test="name != null and name != '' ">
			<!-- 模糊查询，1.要用bind 将查询的东西与页面的显示联系起来 -->
			<bind name="name" value="'%' + name + '%'" />
			<!-- 模糊查询，2.like关键字模糊查询 -->
			and g.name like #{name}
		</if>
	</select>

	<insert id="addGoods" parameterType="Goods">
		insert into shop_goods
		values
		(#{id},#{goodsNo},#{name},#{categoryId},#{price1},#{price2},#{stock},#{thumbnail},#{description})
	</insert>


	<select id="listGoodsByPage" parameterType="hashmap" resultMap="GoodsResultMap">

		select g.*, c.name cname from shop_goods g, shop_category c
		where
		g.categoryId = c.id
		<!-- 一定要判断goods是否为空，否则会报错 source is null for getProperty(null, "categoryId") -->
		<if test="goods != null">
			<!-- parameterType为hashmap的情况下，查询时一定要加key的名字，比如goods.name -->
			<if test="goods.categoryId != null and goods.categoryId!= '' ">
				and g.categoryId = #{goods.categoryId}
			</if>
			<!-- 这里要指出key值，因为hashmap中放了多个值，比如goods.name -->
			<if test="goods.name != null and goods.name != '' ">
				<!-- 模糊查询，1.要用bind 将查询的东西与页面的显示联系起来 -->
				<bind name="goods.name" value="'%' + goods.name + '%'" />
				<!-- 模糊查询，2.like关键字模糊查询 -->
				and g.name like #{goods.name}
			</if>
		</if>
		ORDER BY id LIMIT #{pageNo}, #{pageSize}

	</select>


	<select id="getTotalNum" parameterType="Goods" resultType="int">
		<!-- 这里给c.name使用别名cname，因为g中也name列，会重复 -->
		select count(*) from shop_goods g, shop_category c where g.categoryId
		= c.id
		<!-- parameterType单一的情况下，就是只有goods或者只有string，(不是hashmap或者list等)， 查询时不需要加所属名字的，比如goods.name -->
		<if test="categoryId != null and categoryId!= '' ">
			and g.categoryId = #{categoryId}
		</if>
		<if test="name != null and name != '' ">
			<!-- 模糊查询，1.要用bind 将查询的东西与页面的显示联系起来 -->
			<bind name="name" value="'%' + name + '%'" />
			<!-- 模糊查询，2.like关键字模糊查询 -->
			and g.name like #{name}
		</if>
	</select>


	<update id="updateGoods" parameterType="Goods">
		update shop_goods
		set
		goodsNo = #{goodsNo}, name = #{name}, categoryId = #{categoryId},
		price1 = #{price1},price2 = #{price2}, stock = #{stock}, thumbnail =
		#{thumbnail}, description= #{description}
		where id = #{id}
	</update>

	<select id="getGoodsById" parameterType="string" resultType="Goods">
		select * from shop_goods where id = #{id}
	</select>

	<delete id="delGoods" parameterType="string">
		delete from shop_goods where
		id = #{id}
	</delete>

	<select id="getGoodsByCateId" resultType="Goods">
		select * from
		shop_goods WHERE categoryId = #{0} LIMIT #{1}
	</select>

	<select id="getGoodsByIds" resultType="Goods">
		select id, name, price2, thumbnail from shop_goods where id in
		<foreach collection="array" open="(" close=")" separator=","
			index="index" item="id">
			#{id}
		</foreach>
	</select>

</mapper>